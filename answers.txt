Name: Vincent Luu
Login ID: luuvl
Student ID: 1269979


*** Planning task ***

1. Should the server accept calls from everyone, or just a subset of users?
If the server accepted calls from everyone, malicious actors could flood the system with calls. Therefore, a "real world" RPC server should only accept calls from authenticated/trusted users. However, this particular project does not need to handle bad actors and can therefore accept calls from everyone on IPv6.

2. Should authentication etc. be provided by the RPC framework, or by the functions that use the RPC framework?
In a "real world" server, authentication should be provided by the RPC framework so that it can provide authentication for all calls and responses before being passed on to functions. Furthermore, this wouldn't need to rely on the competency of function implementors. The scope of this project does not require such authentication.

3. What transport layer protocol should be used? What are the trade-offs?
In this project, TCP should be used due to its reliability since it can handle IP layer packet loss and duplication. The trade-off with using TCP, rather than UDP, is that it requires the creation and management of a connection, resulting in slower data transmission and increased overhead. A "real world" server could potentially use either if the implementation makes use of UDP in a reliable way.

4. In which function(s) should the socket(s) be created?
A socket requires a 5 tuple: Client IP, Client Port, Server IP, Server Port, Protocol
The protocol is constant.
"rpc_init_server" receives information for and sets up Server IP and Server Port [socket(), bind()].
"rpc_server_all" listens and accepts incoming connections [listen(), bind()].
"rpc_connect_client" initiates a connection using Client IP and Client Port [socket()].
Therefore, the socket(s) will be created in the rpc_init_server, rpc_server_all, rpc_connect_client functions in this project. A "real world" server would likely follow the same idea with separate functions handling client and server 3 tuples. 

5. Should rpc_client and rpc_server be allocated dynamically or statically? What are the implications for the client and server code?
In this project, "rpc_server" and “rpc_client” should both be allocated dynamically to provide more flexibility, better space efficiency and modularity. However, this would mean that the server code would have to be able to handle generic (unspecified size) data, specifically to do with the stored functions. Also, the client and server code would need to free the allocated memory on close. These things would also be true for a "real world" RPC server.

6. What happens if one host uses big-endian byte order and the other uses little-endian? How does that relate to “network byte order”?
If hosts use different endian byte orders, information on one host will not match information sent to the other. Using "network byte order" resolves this issue by enforcing big-endian byte order, regardless of the machine's architecture. This is true both in this project and in a "real world" RPC server. 




*** Protocol Description ***
- A client always initiates a "conversation" with the server by sending a request.
- The implementation is non-persistent so a connection has to be established and then torn down for each request.
- Below, each "send" from the client is matched by a "recv" by the server and vice versa.


** Requests **
Two types of requests:
FIND
_ rpc_handle *rpc_find(rpc_client *cl, char *name) _
Used to find a function given its name.
Returns a rpc_handle* used to identify the function.

C1.  Client sends 5 bytes: "FIND" [incl NULL byte]
C2.  Client sends 8-byte function name string length in network byte order
C3.  Client sends function name string which is of length specified in C2.
On success:
S1a. Server sends 8-byte function id in network byte order
On failure (e.g function not found):
S1b. Server sends 8-byte -1 in network byte order

CALL
_ rpc_data *rpc_call(rpc_client *cl, rpc_handle *h, rpc_data *payload) _
Used to call a function, identified by its rpc_handle *h, on the rpc_data *payload.
Returns rpc_data *result of the function on the payload.

C1.  Client sends 5 bytes: "CALL" [incl NULL byte]
C2.  Client sends 8-byte function id (i.e. h->id) in network byte order
C3.  Client sends 8-byte data1 of payload in network byte order
C4.  Client sends 8-byte data2_len of payload in network byte order
C5.  Client sends data2 bytes of payload if data2_len > 0. This will send data2_len many bytes.
On success:
S1a. Server sends 5 bytes confirmation status message: "DATA" [incl NULL byte]
S2.  Server sends 8-byte data1 of result in network byte order
S3.  Server sends 8-byte data2_len of result in network byte order
S4.  Server sends data2 bytes of result if data2_len > 0. This will send data2_len many bytes.
On failure (e.g function not found, bad payload data, bad handler, overlength):
S1b. Server sends 5-byte error status message: "NULL" [incl NULL byte]


** Transport Layer Protocol **
TCP should be used as the transport protocol. The implementation runs on top of IPv6.

TCP
Pros: Reliable
Cons: Requires connections and therefore more overhead

UDP
Pros: Connectionless and therefore less overhead
Cons: Unreliable

Since TCP is reliable, the application protocol should work correctly even if there is IP layer packet loss or duplication.


** Dealing with size limitations **
DIFFERENT ARCHITECTURE
- All int and size_t are sent as 64-bit numbers encoded in network byte ordering. (This means that data1 and data2_len is limited to 64-bits)
- After being received, the receiving machine will cast the received number into an int or size_t.
- Letting the receiving machine cast the number ensures that it is the max (up to 64-bits) allowable size on that machine's architecture.
- Furthermore, all numbers are sent in network byte order to avoid the problem described in Q6 above.

OVERLENGTH ERROR
- Payloads with data2 that are larger than 100,000 bytes will be rejected: "Overlength error" will be printed to stderr (client-side) and NULL will be returned from the call to rpc_call().
- Results with data2 that are larger than 100,000 bytes will not be returned. "Overlength error" will be printed to stderr (server-side) and "NULL" will be returned to rpc_call().

MAX IP PACKET SIZE
- The maximum IP packet payload is 65,535 bytes (Source: http://euclid.nmu.edu/~rappleto/Classes/CS442/Notes/IPv6_Header.html).
- However, the data link layer has a much smaller MTU (Maximum Transmission Unit)
- Therefore, the implemented protocol lets TCP automatically deal with packets above 65,535 bytes in the way it chooses
